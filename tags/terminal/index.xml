<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Terminal on kevinkivi.com</title><link>https://kevinkivi.com/tags/terminal/</link><description>Recent content in Terminal on kevinkivi.com</description><generator>Hugo -- 0.144.0</generator><language>en</language><lastBuildDate>Sun, 25 Jul 2021 10:11:00 +0200</lastBuildDate><atom:link href="https://kevinkivi.com/tags/terminal/index.xml" rel="self" type="application/rss+xml"/><item><title>Say goodbye to grep</title><link>https://kevinkivi.com/posts/the-silver-searcher/</link><pubDate>Sun, 25 Jul 2021 10:11:00 +0200</pubDate><guid>https://kevinkivi.com/posts/the-silver-searcher/</guid><description>&lt;p>&lt;code>ack&lt;/code> is a famous code search tool to replace &lt;code>grep&lt;/code> (in a lot of use cases): &lt;a href="https://beyondgrep.com/why-ack/">https://beyondgrep.com/why-ack/&lt;/a>&lt;/p>
&lt;p>Now there is something even better. There is &lt;code>ag&lt;/code> aka The Silver Searcher: &lt;a href="https://github.com/ggreer/the_silver_searcher">ggreer/the_silver_searcher&lt;/a>
It is like ack, but faster.&lt;/p>
&lt;h3 id="why-not-just-grep">Why not just grep?&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/ggreer/the_silver_searcher#whats-so-great-about-ag">Hella fast.&lt;/a> &lt;a href="https://geoff.greer.fm/ag/speed/">Like really&lt;/a> &lt;a href="https://github.com/ggreer/the_silver_searcher#how-is-it-so-fast">really fast.&lt;/a> It is beautifully optimized C.&lt;/li>
&lt;li>It ignores files from &lt;code>.gitignore&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Instead of doing this with grep:&lt;/p>
&lt;pre tabindex="0">&lt;code>grep -R --exclude-dir=node_modules &amp;#39;foobar&amp;#39; /path/to/your/code
&lt;/code>&lt;/pre>&lt;p>You can just do (if you have node_modules in your .gitignore):&lt;/p></description></item><item><title>Echoing multiline in linux terminal</title><link>https://kevinkivi.com/posts/echoing-multiline-in-linux-terminal/</link><pubDate>Sat, 03 Feb 2018 18:02:29 +0000</pubDate><guid>https://kevinkivi.com/posts/echoing-multiline-in-linux-terminal/</guid><description>&lt;p>There are at least three fun ways to echo multiline to a file. We are going to look at doing the output twice, the heredoc -method and writing multiline using double quotes. 1. Output twice I think this is the simplest and most intuitive method if you are familiar with linux output redirection.&lt;/p>
&lt;pre tabindex="0">&lt;code>user@server:~/projects/blog\_content$ echo &amp;#34;This file is&amp;#34; &amp;gt;&amp;gt; multiline.txt
user@server:~/projects/blog\_content$ echo &amp;#34;multiline&amp;#34; &amp;gt;&amp;gt; multiline.txt
user@server:~/projects/blog\_content$ cat multiline.txt
This file is
multiline
&lt;/code>&lt;/pre>&lt;p>2. &lt;a href="https://en.wikipedia.org/wiki/Here_document#Unix_shells">Heredoc&lt;/a> -method You can replace EOF with your choice of characters. It denotes the ending of your input.&lt;/p></description></item></channel></rss>