<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Nodejs on kevinkivi.com</title><link>https://kevinkivi.com/tags/nodejs/</link><description>Recent content in Nodejs on kevinkivi.com</description><generator>Hugo -- 0.139.3</generator><language>en</language><lastBuildDate>Thu, 05 Aug 2021 19:11:00 +0200</lastBuildDate><atom:link href="https://kevinkivi.com/tags/nodejs/index.xml" rel="self" type="application/rss+xml"/><item><title>Add GSI to existing DynamodDB table (nodejs, aws-sdk)</title><link>https://kevinkivi.com/posts/add-gsi-to-existing-table/</link><pubDate>Thu, 05 Aug 2021 19:11:00 +0200</pubDate><guid>https://kevinkivi.com/posts/add-gsi-to-existing-table/</guid><description>&lt;p>If you are using the Serverless Framework, you can create DynamodDB and add &lt;strong>one&lt;/strong> GSI (Global Secondary Index) with cloudformation syntax.&lt;/p>
&lt;p>How to add table: &lt;a href="https://www.serverless.com/framework/docs/providers/aws/guide/resources/#configuration">https://www.serverless.com/framework/docs/providers/aws/guide/resources/#configuration&lt;/a>&lt;/p>
&lt;p>Here is the syntax to add GSI: &lt;a href="https://cloudkatha.com/solved-cannot-perform-more-than-one-gsi-creation-or-deletion-in-a-single-update/">https://cloudkatha.com/solved-cannot-perform-more-than-one-gsi-creation-or-deletion-in-a-single-update/&lt;/a>&lt;/p>
&lt;p>Official docs related to GSI cloudformation syntax: &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-gsi.html">https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-gsi.html&lt;/a>&lt;/p>
&lt;p>That&amp;rsquo;s all fine until you need to add another GSI. You can&amp;rsquo;t do that with Cloudformation syntax [1]. Luckily we can do that programatically with Node.js (you could also use another programming language and just use the related aws-sdk library: &lt;a href="https://aws.amazon.com/tools/">https://aws.amazon.com/tools/&lt;/a>&lt;/p></description></item><item><title>Joker.com automation</title><link>https://kevinkivi.com/posts/joker-com-automation/</link><pubDate>Sun, 09 Oct 2016 11:47:48 +0000</pubDate><guid>https://kevinkivi.com/posts/joker-com-automation/</guid><description>&lt;p>I&amp;rsquo;ve been working on automation for joker.com, so that I can unlock domains and order the auth-id (epp-key, transfer key) faster. It uses the joker.com API. I wrote it in node.js. It is still in development and I will add more functionality to this application. Here is the npm page: &lt;a href="https://www.npmjs.com/package/joker-auto">https://www.npmjs.com/package/joker-auto&lt;/a> Github: &lt;a href="https://github.com/nake89/joker-nodejs">https://github.com/nake89/joker-nodejs&lt;/a>&lt;/p>
&lt;h3 id="joker-automation">Joker Automation&lt;/h3>
&lt;p>This is a node.js script for automating Joker.com services. Still in early development. Currently only logs you in and unlocks a domain and gives you the auth-id (transfer key) of a domain.&lt;/p></description></item></channel></rss>