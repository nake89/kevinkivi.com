<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PHP on kevinkivi.com</title><link>/tags/php/</link><description>Recent content in PHP on kevinkivi.com</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 25 Oct 2022 22:01:00 +0200</lastBuildDate><atom:link href="/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>VIM and PHP</title><link>/posts/vim-php/</link><pubDate>Tue, 25 Oct 2022 22:01:00 +0200</pubDate><guid>/posts/vim-php/</guid><description>To make VIM work more like VSCode, you really want to install VIM plugin called CoC. It adds LSP features to VIM and makes it easy to port VSCode extensions to Vim, and it has great, mature ecosystem: https://github.com/neoclide/coc.nvim
To get PHP language server features, you want to install a PHP language server extension for CoC: https://github.com/marlonfan/coc-phpls
This extension uses Intelephense in the background and makes it so that you can jump to definitions etc.</description></item><item><title>PHP: Curl vs file_get_contents benchmark</title><link>/posts/php-curl-vs-file_get_contents-benchmark/</link><pubDate>Mon, 13 Aug 2018 17:55:17 +0000</pubDate><guid>/posts/php-curl-vs-file_get_contents-benchmark/</guid><description>I benchmarked curl vs file_get_contents in getting headers only and returning the HTTP Status Code. Here are the results:
kevinkivi@server:~/my/secret/directory$ php curlvsfgctest.php Testing curl speed Domain: http://google.com Status: 301 Domain: http://yahoo.com Status: 301 Domain: http://nytimes.com Status: 301 Domain: http://theguardian.com Status: 301 Domain: http://wikipedia.org Status: 301 Curl speed was 0.35739207267761 Testing file\_get\_contents speed Domain: http://google.com Status: HTTP/1.0 301 Moved Permanently Domain: http://yahoo.com Status: HTTP/1.0 301 Moved Permanently Domain: http://nytimes.com Status: HTTP/1.1 301 Moved Permanently Domain: http://theguardian.</description></item><item><title>PHP: Namecheap.com API Class</title><link>/posts/php-namecheap-com-api-class/</link><pubDate>Tue, 16 May 2017 18:19:52 +0000</pubDate><guid>/posts/php-namecheap-com-api-class/</guid><description>I built a simple to use class in PHP for the namecheap.com API. It supports all of Namecheap&amp;rsquo;s API methods. I released the code on GitHub. Example of usage:
&amp;lt;?php require &amp;#39;namecheap.class.php&amp;#39;; $username = &amp;#39;YOUR USERNAME&amp;#39;; $apiKey = &amp;#39;YOUR API KEY&amp;#39;; $clientIp = &amp;#39;IP WHERE THIS YOUR SCRIPT IS HOSTED&amp;#39;; $namecheap = new Namecheap ($username, $apiKey, $clientIp) ; $data\[&amp;#34;Command&amp;#34;\] = &amp;#34;namecheap.ssl.getList&amp;#34;; $returned = $namecheap-&amp;gt;request($data); print\_r($returned) ?&amp;gt; GitHub release: https://github.com/nake89/namecheap</description></item></channel></rss>