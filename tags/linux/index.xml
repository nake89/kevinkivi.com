<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Linux on kevinkivi.com</title><link>https://kevinkivi.com/tags/linux/</link><description>Recent content in Linux on kevinkivi.com</description><generator>Hugo -- 0.148.1</generator><language>en</language><lastBuildDate>Sun, 25 Jul 2021 10:11:00 +0200</lastBuildDate><atom:link href="https://kevinkivi.com/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Say goodbye to grep</title><link>https://kevinkivi.com/posts/the-silver-searcher/</link><pubDate>Sun, 25 Jul 2021 10:11:00 +0200</pubDate><guid>https://kevinkivi.com/posts/the-silver-searcher/</guid><description>&lt;p>&lt;code>ack&lt;/code> is a famous code search tool to replace &lt;code>grep&lt;/code> (in a lot of use cases): &lt;a href="https://beyondgrep.com/why-ack/">https://beyondgrep.com/why-ack/&lt;/a>&lt;/p>
&lt;p>Now there is something even better. There is &lt;code>ag&lt;/code> aka The Silver Searcher: &lt;a href="https://github.com/ggreer/the_silver_searcher">ggreer/the_silver_searcher&lt;/a>
It is like ack, but faster.&lt;/p>
&lt;h3 id="why-not-just-grep">Why not just grep?&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/ggreer/the_silver_searcher#whats-so-great-about-ag">Hella fast.&lt;/a> &lt;a href="https://geoff.greer.fm/ag/speed/">Like really&lt;/a> &lt;a href="https://github.com/ggreer/the_silver_searcher#how-is-it-so-fast">really fast.&lt;/a> It is beautifully optimized C.&lt;/li>
&lt;li>It ignores files from &lt;code>.gitignore&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Instead of doing this with grep:&lt;/p>
&lt;pre tabindex="0">&lt;code>grep -R --exclude-dir=node_modules &amp;#39;foobar&amp;#39; /path/to/your/code
&lt;/code>&lt;/pre>&lt;p>You can just do (if you have node_modules in your .gitignore):&lt;/p></description></item><item><title>Autostart any GUI app in Manjaro</title><link>https://kevinkivi.com/posts/auto-start-gui-app-in-manjaro/</link><pubDate>Fri, 30 Apr 2021 19:33:00 +0200</pubDate><guid>https://kevinkivi.com/posts/auto-start-gui-app-in-manjaro/</guid><description>&lt;p>In this example I will autostart the GUI package manager of Manjaro.&lt;/p>
&lt;p>Create a file e.g. &lt;code>~/.config/autostart/pamac-manager.desktop&lt;/code>
In that file put:&lt;/p>
&lt;pre tabindex="0">&lt;code>[Desktop Entry]
Terminal=false
Name=pamac-manager
Type=Application
Exec=/usr/bin/pamac-manager
Icon=pamac-manager
Comment=Package Manager
&lt;/code>&lt;/pre>&lt;p>In the &lt;code>Exec&lt;/code> line put the path to your executable file. The rest you can probably guess.&lt;/p>
&lt;p>Source: &lt;a href="https://specifications.freedesktop.org/autostart-spec/autostart-spec-latest.html">https://specifications.freedesktop.org/autostart-spec/autostart-spec-latest.html&lt;/a>&lt;/p></description></item><item><title>Linux &amp; OSX: Get file encoding</title><link>https://kevinkivi.com/posts/linux-osx-get-file-encoding/</link><pubDate>Fri, 28 Sep 2018 14:37:01 +0000</pubDate><guid>https://kevinkivi.com/posts/linux-osx-get-file-encoding/</guid><description>&lt;p>Sometime you need to know what&amp;rsquo;s your file encoding? Is it UTF-8, ISO 8859-1, ASCII or Windows 1252? You can find this out by using the &lt;code>file&lt;/code> Unix command. Linux: &lt;code>file -i &amp;lt;filename&amp;gt;&lt;/code> Mac OSX: &lt;code>file -I &amp;lt;filename&amp;gt;&lt;/code> Example usage:&lt;/p>
&lt;pre tabindex="0">&lt;code>username@server ~$ file -i somefile.php
somefile.php: text/x-php; charset=us-ascii
username@server ~$ file -i myutf8file.txt
myutf8file.txt: text/plain; charset=utf-8
username@server ~$ file -i username.tar.bz2
username.tar.bz2: application/x-bzip2; charset=binary
username@server ~$
&lt;/code>&lt;/pre>&lt;p>If you want only the encoding. You can do &lt;code>file -i filename.txt | sed &amp;quot;s/.*charset=\(.*\)/\1/&amp;quot;&lt;/code> E.g.&lt;/p></description></item><item><title>cPanel: Listing all domains</title><link>https://kevinkivi.com/posts/cpanel-listing-all-domains/</link><pubDate>Sun, 11 Feb 2018 19:46:38 +0000</pubDate><guid>https://kevinkivi.com/posts/cpanel-listing-all-domains/</guid><description>&lt;p>I made a bash script listing all main domains and addon domains (for certain user by username or domain or for all users) in cPanel.&lt;/p>
&lt;pre tabindex="0">&lt;code>Usage: lsdom [OPTION] [INPUT]
Example: lsdom [cPanel username]
Lists domains for certain user by username or domain or for all users
Options:
-d [domain] Displays all domains of the user of the input domain.
-a, --all Lists all domains.
-v, --version Displays version.
-h, --help This help page.
&lt;/code>&lt;/pre>&lt;p>GitHub: &lt;a href="https://github.com/nake89/lsdom">https://github.com/nake89/lsdom&lt;/a>&lt;/p></description></item><item><title>cPanel: Listing all non-self-signed certificates</title><link>https://kevinkivi.com/posts/cpanel-listing-all-non-self-signed-certificates/</link><pubDate>Sat, 10 Feb 2018 13:39:23 +0000</pubDate><guid>https://kevinkivi.com/posts/cpanel-listing-all-non-self-signed-certificates/</guid><description>&lt;p>I made a bash script listing all non-self-signed certificates (for certain user by username or domain or for all users) in cPanel.&lt;/p>
&lt;pre tabindex="0">&lt;code>Usage: lrcert [OPTION] [INPUT]
Example: lrcert [cPanel username]
Options:
-d [domain] Displays all certificates of the owner of the domain.
-a, --all Lists all certificates of all cPanel users
-v, --version Displays version.
-h, --help This help page.
&lt;/code>&lt;/pre>&lt;p>GitHub: &lt;a href="https://github.com/nake89/lrcert/">https://github.com/nake89/lrcert/&lt;/a>&lt;/p></description></item><item><title>Echoing multiline in linux terminal</title><link>https://kevinkivi.com/posts/echoing-multiline-in-linux-terminal/</link><pubDate>Sat, 03 Feb 2018 18:02:29 +0000</pubDate><guid>https://kevinkivi.com/posts/echoing-multiline-in-linux-terminal/</guid><description>&lt;p>There are at least three fun ways to echo multiline to a file. We are going to look at doing the output twice, the heredoc -method and writing multiline using double quotes. 1. Output twice I think this is the simplest and most intuitive method if you are familiar with linux output redirection.&lt;/p>
&lt;pre tabindex="0">&lt;code>user@server:~/projects/blog\_content$ echo &amp;#34;This file is&amp;#34; &amp;gt;&amp;gt; multiline.txt
user@server:~/projects/blog\_content$ echo &amp;#34;multiline&amp;#34; &amp;gt;&amp;gt; multiline.txt
user@server:~/projects/blog\_content$ cat multiline.txt
This file is
multiline
&lt;/code>&lt;/pre>&lt;p>2. &lt;a href="https://en.wikipedia.org/wiki/Here_document#Unix_shells">Heredoc&lt;/a> -method You can replace EOF with your choice of characters. It denotes the ending of your input.&lt;/p></description></item><item><title>How to Search Contents of File in Linux</title><link>https://kevinkivi.com/posts/search-contents-file-linux/</link><pubDate>Sat, 15 Apr 2017 17:48:48 +0000</pubDate><guid>https://kevinkivi.com/posts/search-contents-file-linux/</guid><description>&lt;p>This is something you need to do often for one reason or another. Maybe you have a bunch of text files, which have been named horribly and you have no idea which file has the thing you are looking for, but you happen to remember a word in that file. Or maybe you need to find which file contains a certain variable to find the root cause of an error you are experiencing in your script.&lt;/p></description></item></channel></rss>