<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Password on kevinkivi.com</title><link>https://kevinkivi.com/tags/password/</link><description>Recent content in Password on kevinkivi.com</description><generator>Hugo -- 0.144.0</generator><language>en</language><lastBuildDate>Tue, 17 Aug 2021 17:28:00 +0200</lastBuildDate><atom:link href="https://kevinkivi.com/tags/password/index.xml" rel="self" type="application/rss+xml"/><item><title>Passwords in Email</title><link>https://kevinkivi.com/posts/passwords-in-email/</link><pubDate>Tue, 17 Aug 2021 17:28:00 +0200</pubDate><guid>https://kevinkivi.com/posts/passwords-in-email/</guid><description>&lt;p>It happened again. I created an account to a service (a domain registrar) and their welcome email contained the password I just gave them. You might think that that is fine, because &lt;em>maybe&lt;/em> they didn&amp;rsquo;t store that password plain text in their DB. Maybe they hashed it. If you are confused about what &lt;em>hashing&lt;/em> means, then read this &lt;a href="https://auth0.com/blog/hashing-passwords-one-way-road-to-security/">auth0 article&lt;/a>.&lt;/p>
&lt;p>Hashing in short: Normally passwords are stored in the database in a cryptographically secure manner, called a hash. This hash cannot be reversed to the password. Unless bruteforced, the stronger the password, the longer it will take, potentially up to tens/hundreds of thousands years (hashing algorithm and salting also can affect the difficulty in bruteforcing). This means that if somebody hacks the database, the attacker wont get all the customers&amp;rsquo; passwords.&lt;/p></description></item></channel></rss>